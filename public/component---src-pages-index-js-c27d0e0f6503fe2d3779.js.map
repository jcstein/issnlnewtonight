{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/components/seo.js","webpack://gatsby-starter-hello-world/./src/pages/index.js"],"names":["SEO","description","lang","meta","metaImage","image","title","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","property","author","concat","width","height","defaultProps","Home","data","css","role","aria-label","allMarkdownRemark","edges","map","node","key","id","Link","to","fields","slug","rhythm","frontmatter","date","excerpt"],"mappings":"uLAKA,SAASA,EAAT,GAA8E,IAA/DC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,KAAaC,EAA8B,EAArCC,MAAkBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvDC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBT,GAAeO,EAAKG,aAAaV,YACnDI,EACJD,GAAaA,EAAUQ,IAAvB,GACOJ,EAAKG,aAAaE,QAAUT,EAAUQ,IACzC,KACAE,EAAYP,EAAQ,GAAMC,EAAKG,aAAaE,QAAUN,EAAa,KAEzE,OACE,QAAC,IAAD,CACEQ,eAAgB,CACdb,QAEFI,MAAOA,EACPU,cAAa,QAAUR,EAAKG,aAAaL,MACzCW,KACEH,EACI,CACE,CACEI,IAAK,YACLC,KAAML,IAGV,GAENX,KAAM,CACJ,CACEiB,KAAK,cACLC,QAASX,GAEX,CACEY,SAAS,WACTD,QAASf,GAEX,CACEgB,SAAS,iBACTD,QAASX,GAEX,CACEY,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASb,EAAKG,aAAaY,QAE7B,CACEH,KAAK,gBACLC,QAASf,GAEX,CACEc,KAAK,sBACLC,QAASX,IAGVc,OACCpB,EACI,CACE,CACEkB,SAAU,WACVD,QAAShB,GAEX,CACEiB,SAAU,iBACVD,QAASjB,EAAUqB,OAErB,CACEH,SAAU,kBACVD,QAASjB,EAAUsB,QAErB,CACEN,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBG,OAAOrB,KAKhBH,EAAI2B,aAAe,CACjBzB,KAAK,KACLC,KAAM,GACNF,YAAY,IAgBd,O,4TCrHe,SAAS2B,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OACK,QAAC,IAAD,MACL,QAAC,IAAD,CAAKvB,MAAM,6BACP,oBACE,cACEwB,IAAG,IAKJ,gBAAMC,KAAK,MAAMC,aAAW,QAA5B,MAND,wCASCH,EAAKI,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,eAAKC,IAAKD,EAAKE,KACb,QAAC,EAAAC,KAAD,CACEC,GAAIJ,EAAKK,OAAOC,KAChBZ,IAAG,IAKH,cACEA,KAAKA,QAAF,kBACgBa,QAAO,EAAI,GAD3B,MAIFP,EAAKQ,YAAYtC,MAAO,KACzB,gBACEwB,IAAG,GADL,KAKKM,EAAKQ,YAAYC,QAGxB,iBAAIT,EAAKU","file":"component---src-pages-index-js-c27d0e0f6503fe2d3779.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default SEO","import React from \"react\"\nimport { css } from \"@emotion/react\"\nimport { Link, graphql } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n\nexport default function Home({ data }) {\n  return (\n       <Layout>\n  <SEO title=\"is SNL new tonight? App\" />\n      <div>\n        <h1\n          css={css`\n            display: inline-block;\n            border-bottom: 1px solid;\n          `}\n        >\n         <span role=\"img\" aria-label=\"wave\">ðŸ‘‹</span> is Saturday Night Live new tonight?\n        </h1>\n\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.fields.slug}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <h2\n                css={css`\n                  margin-bottom: ${rhythm(1 / 4)};\n                `}\n              >\n                {node.frontmatter.title}{\" \"}\n                <span\n                  css={css`\n                    color: #555;\n                  `}\n                >\n                  â€” {node.frontmatter.date}\n                </span>\n              </h2>\n              <p>{node.excerpt}</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}